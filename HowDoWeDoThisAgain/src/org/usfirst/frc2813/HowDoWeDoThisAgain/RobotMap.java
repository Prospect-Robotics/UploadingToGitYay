// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.HowDoWeDoThisAgain;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Spark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainQuadratureEncoder1;
    public static Encoder driveTrainQuadratureEncoder2;
    public static Encoder driveTrainQuadratureEncoder3;
    public static Encoder driveTrainQuadratureEncoder4;
    public static SpeedController driveTrainSpeedController1;
    public static SpeedController driveTrainSpeedController2;
    public static SpeedController driveTrainSpeedController3;
    public static SpeedController driveTrainSpeedController4;
    public static RobotDrive driveTrainRobotDrive;
    public static SpeedController climberMotor;
    
	private static final double WHEEL_DIAMETER = 6; // inches
	private static final double WHEEL_CIRCUMFERENCE = Math.PI * WHEEL_DIAMETER;
	private static final int    ENCODER_TICKS_PER_REVOLUTION = 2000; // obtained from datasheet
	private static final double ENCODER_TICKS_PER_INCH = ENCODER_TICKS_PER_REVOLUTION / WHEEL_CIRCUMFERENCE;
	private static final double ENCODER_TICKS_PER_FOOT = ENCODER_TICKS_PER_INCH / 12.0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 1", driveTrainQuadratureEncoder1);
        driveTrainQuadratureEncoder1.setDistancePerPulse(ENCODER_TICKS_PER_FOOT);
        driveTrainQuadratureEncoder1.setPIDSourceType(PIDSourceType.kDisplacement);
        driveTrainQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 2", driveTrainQuadratureEncoder2);
        driveTrainQuadratureEncoder2.setDistancePerPulse(ENCODER_TICKS_PER_FOOT);
        driveTrainQuadratureEncoder2.setPIDSourceType(PIDSourceType.kDisplacement);
        driveTrainQuadratureEncoder3 = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 3", driveTrainQuadratureEncoder3);
        driveTrainQuadratureEncoder3.setDistancePerPulse(ENCODER_TICKS_PER_FOOT);
        driveTrainQuadratureEncoder3.setPIDSourceType(PIDSourceType.kDisplacement);
        driveTrainQuadratureEncoder4 = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 4", driveTrainQuadratureEncoder4);
        driveTrainQuadratureEncoder4.setDistancePerPulse(ENCODER_TICKS_PER_FOOT);
        driveTrainQuadratureEncoder4.setPIDSourceType(PIDSourceType.kDisplacement);
        driveTrainSpeedController1 = new Spark(0);
        LiveWindow.addActuator("DriveTrain", "Speed Controller 1", (Spark) driveTrainSpeedController1);
        
        driveTrainSpeedController2 = new Spark(1);
        LiveWindow.addActuator("DriveTrain", "Speed Controller 2", (Spark) driveTrainSpeedController2);
        
        driveTrainSpeedController3 = new Spark(2);
        LiveWindow.addActuator("DriveTrain", "Speed Controller 3", (Spark) driveTrainSpeedController3);
        
        driveTrainSpeedController4 = new Spark(3);
        LiveWindow.addActuator("DriveTrain", "Speed Controller 4", (Spark) driveTrainSpeedController4);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainSpeedController1, driveTrainSpeedController2,
              driveTrainSpeedController3, driveTrainSpeedController4);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        climberMotor = new Spark(8);
        LiveWindow.addActuator("Climber", "Motor", (Spark) climberMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
